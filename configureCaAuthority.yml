---
###################
# File:
# playbooks/configureCaAuthority.yml
#
# Description:
# Sets up the CA Authority box according to instructions here:
# https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/04-certificate-authority.md 
#
# Notes 
#
# Author(s):
#   - Ben Watson
# Notes:
#   - TODO: vault the admin password
###################
- name: PLAY | Configure CA Authority
  hosts: ansible-controllers
  gather_facts: false
  vars:
    - ca_dir: /opt/k8s-ca
  tasks:
  
    ###########
    # define/include any "task-level" tasks here
    ###########
    
    - name: FILE | Ensure destination directory exists for CA files
      file:
        path: "{{ ca_dir }}"
        state: directory
        owner: root
        group: root
      become: true
      tags:
        - ca_dir
        
    - name: FILE | Ensure bin directory exists for user
      file:
        path: "~/bin"
        state: directory
      tags:
        - ca_sw
      
    - name: GET_URL | Download/install cfssl
      get_url:
        url: https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
        dest: /usr/local/bin/cfssl
        mode: 0775
        owner: root
        group: root
      become: true
      tags:
        - ca_sw
      
    - name: GET_URL | Download/install cfssljson
      get_url:
        url: https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
        dest: /usr/local/bin/cfssljson
        mode: 0775
        owner: root
        group: root
      become: true
      tags:
        - ca_sw
      
    - name: GET_URL | Download/install kubectl
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/v1.7.4/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        mode: 0775
        owner: root
        group: root
      become: true
      tags:
        - ca_sw
        
    - name: FILE | Link to bin directory
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
      with_items:
        - { src: /usr/local/bin/cfssl, dest: "~/bin/cfssl" }
        - { src: /usr/local/bin/cfssljson, dest: "~/bin/cfssljson" }
        - { src: /usr/local/bin/kubectl, dest: "~/bin/kubectl" }
      tags:
        - ca_sw
    
    - name: TEMPLATE | Template out the CA config file
      template:
        src: ca-config.json.j2
        dest: "{{ ca_dir }}/ca-config.json"
        owner: root
        group: root
      become: true
      tags:
        - ca_cer
      
    - name: TEMPLATE | Template out the CA csr file
      template:
        src: ca-csr.json.j2
        dest: "{{ ca_dir }}/ca-csr.json"
        owner: root
        group: root
      become: true
      tags:
        - ca_cer
      
    - name: SHELL | Generate CA cert and private key
      shell: /usr/local/bin/cfssl gencert -initca ca-csr.json | /usr/local/bin/cfssljson -bare ca
      args:
        chdir: "{{ ca_dir }}"
        creates: "{{ ca_dir }}/ca.pem"
      become: true
      tags:
        - ca_cer
      
    - name: TEMPLATE | Template out the admin csr file
      template:
        src: admin-csr.json.j2
        dest: "{{ ca_dir }}/admin-csr.json"
        owner: root
        group: root
      become: true
      tags:
        - admin_cer
      
    - name: SHELL | Generate admin cert and private key
      shell: /usr/local/bin/cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | /usr/local/bin/cfssljson -bare admin
      args:
        chdir: "{{ ca_dir }}"
        creates: "{{ ca_dir }}/admin.pem"
      become: true
      tags:
        - admin_cer
      
    - name: TEMPLATE | Template out the kube proxy csr file
      template:
        src: kube-proxy-csr.json.j2
        dest: "{{ ca_dir }}/kube-proxy-csr.json"
        owner: root
        group: root
      become: true
      tags:
        - kube_proxy_cer
      
    - name: SHELL | Generate kube proxy cert and private key
      shell: /usr/local/bin/cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | /usr/local/bin/cfssljson -bare kube-proxy
      args:
        chdir: "{{ ca_dir }}"
        creates: "{{ ca_dir }}/kube-proxy.pem"
      become: true
      tags:
        - kube_proxy_cer
      
    - name: SHELL | determine static IP of network
      shell: echo $(gcloud compute addresses describe {{ gcp_net_name }} --region $(gcloud config get-value compute/region) --format 'value(address)')
      register: ret_val_gcp_net_static_ip
      tags:
        - kube_api_server_cer
      
    - debug:
        var: ret_val_gcp_net_static_ip
        verbosity: 1
      tags:
        - kube_api_server_cer
        
    - set_fact:
        gcp_net_static_ip: "{{ ret_val_gcp_net_static_ip.stdout_lines[0] }}"
      tags:
        - kube_api_server_cer
        
    - debug:
        var: gcp_net_static_ip
        verbosity: 1
      tags:
        - kube_api_server_cer
        
    - name: TEMPLATE | Template out the kubernetes csr file
      template:
        src: kubernetes-csr.json.j2
        dest: "{{ ca_dir }}/kubernetes-csr.json"
        owner: root
        group: root
      become: true
      tags:
        - kube_api_server_cer
        
    - name: SHELL | Generate kubernetes api server cert and private key
      shell: /usr/local/bin/cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname=10.32.0.1,10.240.0.10,10.240.0.11,10.240.0.12,{{ gcp_net_static_ip }},127.0.0.1,kubernetes.default -profile=kubernetes kubernetes-csr.json | /usr/local/bin/cfssljson -bare kubernetes
      args:
        chdir: "{{ ca_dir }}"
        creates: "{{ ca_dir }}/kubernetes.pem"
      become: true
      tags:
        - kube_api_server_cer