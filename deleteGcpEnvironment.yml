---
###################
# File:
# playbooks/deleteGcpVMs.yml
#
# Description:
# Deletes the VMs that were spun out on GCP 
#
# Notes 
#
# Author(s):
#   - Ben Watson
# Notes:
#   - TODO: vault the admin password
###################
- name: PLAY | Delete GCP 
  hosts: ["gcp-environment:!ansible-controllers"]
  gather_facts: false
#  vars_files:
#    - vars/vault.yml
  tasks:
  
    ###########
    # define/include any "task-level" tasks here
    ###########
    
    #~~~~~~~~~~
    # These tasks will be run once per VM inside the environment
    #~~~~~~~~~~
    
    - name: GCE | Ensure VMs (instances) are deleted
      gce:
        instance_names: "{{ gcp_instance_name }}"
        zone: "{{ gcp_zone }}"
        state: absent
        service_account_email: "{{ gcp_service_account_email }}"
        credentials_file: "{{ gcp_credentials_file }}"
        project_id: "{{ gcp_project_id }}"
      delegate_to: 127.0.0.1
      tags:
        - gcp_vm
      register: ret_val
        
    - debug:
        var: ret_val
        verbosity: 1
      tags:
        - gcp_vm
        
    - name: LINEINFILE | Update Ansible Controller's /etc/hosts to remote machine aliases
      lineinfile:
        path: /etc/hosts
        regexp: '{{ inventory_hostname }}'
        state: absent
        backrefs: yes
      become: true
      with_items: ret_val.instance_data
      delegate_to: 127.0.0.1
      tags:
        - gcp_vm
        
    - name: SHELL | use gcloud to delete route
      delegate_to: 127.0.0.1
      shell: gcloud -q compute routes delete kubernetes-route-{{ inventory_hostname }}
      register: ret_val_route
#      changed_when: '"Created" in ret_val_route.stderr'
#      failed_when: 'ret_val_route.rc != 0 and (ret_val_route.rc == 1 and "already exists" not in ret_val_route.stderr)'
      ignore_errors: true
      tags:
        - worker_routes
        
    - debug:
        var: ret_val_route
        verbosity: 1
      tags:
        - worker_routes
        
    #~~~~~~~~~~
    # These tasks will be run once per "environment"
    #~~~~~~~~~~
    - name: SHELL | determine public address (format == name)
      run_once: true
      shell: echo $(gcloud compute addresses describe {{ gcp_net_name }} --region $(gcloud config get-value compute/region) --format 'value(name)')
      register: ret_val_gcp_pub_name
      tags:
        - gcp_lb
        - gcp_pub_net
      
    - debug:
        var: ret_val_gcp_pub_name
        verbosity: 1
      run_once: true
      tags:
        - gcp_lb
        - gcp_pub_net
        
    - set_fact:
        gcp_pub_name: "{{ ret_val_gcp_pub_name.stdout_lines[0] }}"
      tags:
        - gcp_lb
        - gcp_pub_net
        
    - debug:
        var: gcp_pub_name
        verbosity: 1
      run_once: true
      tags:
        - gcp_lb
        - gcp_pub_net
    
    - name: delete Kubernetes Load Balancer
      delegate_to: 127.0.0.1
      gce_lb:
        httphealthcheck_name: kube-apiserver-health-check
        httphealthcheck_port: 8080
        httphealthcheck_path: /healthz
        name: kubernetes-target-pool
        region: "{{ gcp_net_subnet_region }}"
        members: "{{ gcp_lb_members_list }}"
        external_ip: "{{ gcp_pub_name }}"
        state: absent
        service_account_email: "{{ gcp_service_account_email }}"
        credentials_file: "{{ gcp_credentials_file }}"
        project_id: "{{ gcp_project_id }}"
      run_once: true
      tags:
        - gcp_lb
      register: ret_val_lb
        
    - debug:
        var: ret_val_lb
        verbosity: 1
      tags:
        - gcp_lb
    
    - name: GCE_EIP | Ensure external IP is absent
      gce_eip:
        name: "{{ gcp_ext_ip_name }}"
        region: "{{ gcp_ext_ip_reggion }}"
        state: absent
        service_account_email: "{{ gcp_service_account_email }}"
        credentials_file: "{{ gcp_credentials_file }}"
        project_id: "{{ gcp_project_id }}"
      delegate_to: 127.0.0.1
      run_once: true
      tags:
        - gcp_eip
      register: ret_val
        
    - debug:
        var: ret_val
        verbosity: 1
      run_once: true
      tags:
        - gcp_eip
        
    - name: GCE_NET | Ensure firewall rules are absent
      gce_net:
        name: "{{ item.network }}"
        fwname: "{{ item.name }}"
        allowed: "{{ item.allow }}"
        state: absent
        src_range: "{{ item.source_ranges }}"
        service_account_email: "{{ gcp_service_account_email }}"
        credentials_file: "{{ gcp_credentials_file }}"
        project_id: "{{ gcp_project_id }}"
      with_items: "{{ gcp_net_fw_rules }}"
      delegate_to: 127.0.0.1
      run_once: true
      tags:
        - gcp_fw
      register: ret_val
        
    - debug:
        var: ret_val
        verbosity: 1
      run_once: true
      tags:
        - gcp_fw
        
    - name: GCE_NET | Ensure network is absent
      gce_net:
        name: "{{ gcp_net_name }}"
        mode: "{{ gcp_net_mode }}"
        subnet_name: "{{ gcp_net_subnet_name }}"
        subnet_region: "{{ gcp_net_subnet_region }}"
        ipv4_range: "{{ gcp_net_ipv4_range }}"
        state: absent
        service_account_email: "{{ gcp_service_account_email }}"
        credentials_file: "{{ gcp_credentials_file }}"
        project_id: "{{ gcp_project_id }}"
      delegate_to: 127.0.0.1
      run_once: true
      tags:
        - gcp_network
      register: ret_val
        
    - debug:
        var: ret_val
        verbosity: 1
      run_once: true
      tags:
        - gcp_network